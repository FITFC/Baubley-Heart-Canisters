buildscript {
    repositories {
        jcenter()
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

<<<<<<< Updated upstream
plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.9'
}
=======
version = '1.16.4-1.1.3'
group = 'com.traverse.bhc'
archivesBaseName = 'bhc'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                bhc {
                    source sourceSets.main
                }
            }
        }
>>>>>>> Stashed changes

apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

def username = "${mod_name}"
if (project.hasProperty('dev_mail')) {
    username = "${dev_mail}"
}
else if(project.hasProperty('dev_username')) {
    username = "${dev_username}"
}

version = "${project.mc_version}-${project.mod_version}"
group= project.base_package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = project.mod_name

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

repositories {
    maven {
        //JEI files
        //Mantle
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

minecraft {
    version = "${project.mc_version}-${project.forge_version}"
    if(file('../run').exists()) {
		runDir = "../run"
	}
	else
	{
		runDir = "run"
	}
    
    mappings = project.forge_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	replace "@VERSION@", project.mod_version
    if(project.hasProperty('public_key')) {
        replace "@FINGERPRINTKEY@", "${project.public_key}".replace(":", "").toLowerCase(Locale.ROOT)
    }
    else {
        replace "@FINGERPRINTKEY@", "undefined"
    }
    replaceIn "kiba/bhc/Reference.java"

<<<<<<< Updated upstream
    //auto-configure the run arguments
    clientRunArgs += "--username=${username}"
    if(project.hasProperty('dev_password')) {
        clientRunArgs += "--password=${dev_password}"
    }
    serverRunArgs += "nogui" //mc server GUIs suck :P

    //add the coremod to the dev environment
    serverJvmArgs += "-Dfml.queryResult=confirm"
}
=======
dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.62'
>>>>>>> Stashed changes

sourceSets {
	
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'resources'
		}
	}
}

jar {
    manifest.mainAttributes(
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Built-On": "${project.mc_version}-${project.forge_version}",
            "FMLAT": "${project.mod_name}_at.cfg"
    )
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

dependencies {

    //compile against the JEI api
    //compile "mezz.jei:jei_${project.mc_version}:${project.jei_version}:api"

    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${project.mc_version}:${project.jei_version}"

    //compile baubles from github using jitpack
    deobfCompile "com.github.azanor:Baubles:${baubles_version}"

    //get mantle from curseforge
    runtime "slimeknights.mantle:Mantle:${mantle_version}"


}
tasks.build.dependsOn signJar
tasks.curseforge.dependsOn build

def curseRelations = {
    requiredLibrary 'baubles'
    requiredLibrary 'mantle'
    optionalLibrary 'tinkers-construct'
    //optionalLibrary '' //add curseforge-slug here
}


curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    if(project.hasProperty('curse_id')) {
        project {
            id = project.curse_id
            changelogType = 'markdown'
            changelog = getChangelogText()
            releaseType = project.release_type

            relations curseRelations

            //no such jars for now
            //addArtifact javadocJar
            //addArtifact sourceJar
            //addArtifact apiJar

            addGameVersion '1.12'
            addGameVersion '1.12.1'
            addGameVersion '1.12.2'

            mainArtifact(jar) {
                displayName = "Baubley Heart Canisters v${project.mod_version} MC${project.mc_version}"
            }
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	
	//ATs
	rename '(.+_at.cfg)', 'META-INF/$1'
}

String getChangelogText() {
    def changelogFile = new File(project.projectDir, "changelog.md")
    String str = ''
    if(!changelogFile.exists()) {
        changelogFile.createNewFile()
        return str
    }
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {
                return
            }
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    str += "\n\n see full changelog [here](${project.changelog_url} \"Changelog\")"
    return str
}
